When using a new laptop to authenticate with GitHub, 
it is recommended to generate a new SSH key pair on 
the new machine and add the public key to your GitHub account. 

# Generate a new SSH key pair:

ssh-keygen -t ed25519 -C "francois.collin@gmail.com"

# Add the SSH key to thr SSH agent
   
 - start agent
eval "$(ssh-agent -s)"

 - Add your private SSH key to the SSH agent:

ssh-add ~/.ssh/id_ed25519

# Add the public key to your GitHub account
 - Log in to your GitHub account in a web browser.
 - Navigate to Settings > SSH and GPG keys.
 - Click New SSH key or Add SSH key.
 - Provide a descriptive Title for the new key (e.g., "New Laptop SSH Key").
 - Paste the copied public key into the Key field.
 - Click Add SSH key.
 - Verify the connection:
 - In your terminal, test the SSH connection to GitHub:
Oops, something went wrong. 

########################################
########################################
# IF you still get

remote: Invalid username or token. Password authentication is not supported for Git operations.

# To resolve this issue using a Personal Access Token (PAT):
Generate a Personal Access Token on GitHub:
- Log in to your GitHub account.
- Go to Settings > Developer settings > Personal access tokens > Tokens (classic).
- Click Generate new token.

Provide a descriptive note for the token and select the necessary scopes (permissions), such as repo for repository access and workflow if you are using GitHub Actions.

- Click Generate token and copy the generated token immediately, as it will not be displayed again.

Use the PAT for Git operations:

* When performing Git operations (like git clone, git push, git pull) that require authentication, you will be prompted for your username and password.
- Enter your GitHub username as the username.
- Paste the copied Personal Access Token as the password.

Optional: Store the PAT using Git's credential helper (for convenience):
To avoid entering the PAT repeatedly, you can configure Git to store it securely.
Run the command:
Code

        git config --global credential.helper store

The next time you enter your username and PAT, Git will store it for future use. Be aware that this stores the token in plain text in a local file, so consider the security implications.

##########################################################
##########################################################
##########################################################


#Run
#
#  git config --global user.email "francois.collin@gmail.com"
#  git config --global user.name "Francois Collin"
#
#to set your account's default identity.
#Omit --global to set the identity only in this repository.



#â€¦or create a new repository on the command line
echo "# Example Hugo Syatus Sites" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/12379Monty/example_sites.git
git push -u origin main


# New Repo for Project
# go to ~project folder
git init
cat .gitignore 
git add *
git commit -m 'first'

# if Repo already exists
git remote add origin https://github.com/12379Monty/blogdown-example_sites.git 
 IF
error: remote origin already exists.

git remote remove origin
git remote -v 
git remote add origin https://github.com/12379Monty/blogdown-example_sites.git 




git branch -M main
git push -u origin main

# if Repo does not exist - or create new
git remote set-url origin https://github.com/12379Monty/my_blogdown_book
git push --set-upstream origin master


# hint: Updates were rejected because the remote contains 
# work that you do hint: not have locally.
git pull origin master

